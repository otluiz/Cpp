#include <iostream>
#include <cmath>
#include <fstream>
#include <stdlib.h>
#include <sstream>
#include <cstdlib>
#include <time.h>
#include <malloc.h>


//------------------FOR TEST FUNCTIONS------------------
#include <string.h>
#include <stdlib.h>
#include <GL/gl.h>
#include <GL/glu.h>
#include <GL/glx.h>
#include <X11/Xlib.h>
//#include "cec20_test_func.cpp"
double *OShift,*M,*y,*z,*x_bound;
int ini_flag=0,n_flag,func_flag,*SS;

using namespace std; 

class FSS {
	private:
        int func;
        int interactions;
        int terms;
        int fish;
        int dim;
        double alp;
        double i_step;
        double f_step;
        double position_max;
        double position_min;
        double current_step;
        double weight_difference;
        double step_v;
        double* positions;
        double* new_positions;
        double* fitness;
        double* new_fitness;
        double* weight;
        double* vector_I;
        double* barycenter;
        double* mean_fish_fitness;
        double* best_fish_positions;
        double* fitness_difference;
        double* displacement;
	public:
		double* best_fish_fitness;
        FSS(int function, int n_interactions, int n_terms, int n_fish, int dimension, double alpha, double initial_step, double final_step, int x, double step_variation);
		void initialize();
        void individual_movement();
		void calculate_fitness(bool new_or_old_positions);
        void update_step();
        void direction_I();
        void collective_instinctive_movement();
        void feeding();
        void calculate_barycenter();
        void collective_volitive_movement();
        void best_and_mean();
};

FSS::FSS(int function, int n_interactions, int n_terms, int n_fish, int dimension, double alpha,
                    double initial_step, double final_step, int x, double step_variation){

	//----------Initializing Parameters----------
    func = function;
    interactions = n_interactions;
    terms = n_terms;
    fish = n_fish;
    dim = dimension;
    alp = alpha;
	i_step = initial_step;
    f_step = final_step;
    step_v = step_variation;

	//----------Defining min and max positions and current step----------
    position_max = 100;
    position_min = -100;
    current_step = (position_max-position_min)*i_step;

	//----------For Random----------
	srand (time(NULL));

	//----------Allocating Pointers----------
	positions = (double *)malloc(dim * fish * sizeof(double));
    new_positions = (double *)malloc(dim * fish * sizeof(double));
	fitness = (double *)malloc(fish * sizeof(double));
	new_fitness = (double *)malloc(fish * sizeof(double));
	weight = (double *)malloc(fish * sizeof(double));
    barycenter = (double *)malloc(dim * sizeof(double));
	best_fish_fitness = (double *)malloc(sizeof(double));
	mean_fish_fitness = (double *)malloc(sizeof(double));
    best_fish_positions = (double *)malloc(dim * sizeof(double));
    fitness_difference = (double *)malloc(fish * sizeof(double));
    displacement = (double *)malloc(dim * fish * sizeof(double));
    vector_I = (double *)malloc(dim * sizeof(double));


int main() { 
 
 
  return 0; 
} 
